fusion('E:/trabajos/Fusion/Landsat/LC82020312015067LGN00/Final/b8-v1','E:/trabajos/Fusion/Landsat/LC82020312015067LGN00/Final/b2-v1','haar');fusion('E:/trabajos/Fusion/Landsat/LC82020312015067LGN00/Final/b8-v1','E:/trabajos/Fusion/Landsat/LC82020312015067LGN00/Final/b3-v1','haar');fusion('E:/trabajos/Fusion/Landsat/LC82020312015067LGN00/Final/b8-v1','E:/trabajos/Fusion/Landsat/LC82020312015067LGN00/Final/b4-v1','haar')
fusion('E:/trabajos/Fusion/Landsat/LC82020312015067LGN00/Final/b8-v1','E:/trabajos/Fusion/Landsat/LC82020312015067LGN00/Final/b2-v1','d4');fusion('E:/trabajos/Fusion/Landsat/LC82020312015067LGN00/Final/b8-v1','E:/trabajos/Fusion/Landsat/LC82020312015067LGN00/Final/b3-v1','d4');fusion('E:/trabajos/Fusion/Landsat/LC82020312015067LGN00/Final/b8-v1','E:/trabajos/Fusion/Landsat/LC82020312015067LGN00/Final/b4-v1','d4')
fusion('E:/trabajos/Fusion/Landsat/LC82020312015067LGN00/Final/b8-v1','E:/trabajos/Fusion/Landsat/LC82020312015067LGN00/Final/b2-v1','d16');fusion('E:/trabajos/Fusion/Landsat/LC82020312015067LGN00/Final/b8-v1','E:/trabajos/Fusion/Landsat/LC82020312015067LGN00/Final/b3-v1','d16');fusion('E:/trabajos/Fusion/Landsat/LC82020312015067LGN00/Final/b8-v1','E:/trabajos/Fusion/Landsat/LC82020312015067LGN00/Final/b4-v1','d16')
library(datasets)
data(MAS)
data(MASS)
data(mass)
data(shuttle)
data(shutle)
data(shuttle)
?shuttle
data(InsectSprays)
glm1 <- glm(InsectSprays$count~InsectSprays$spray,family="poisson")
glm1 <- glm(InsectSprays$count~factor(InsectSprays$spray),family="poisson")
summary(glm1)
install.packages("caret")
install.packages("AppliedPredictiveModeling")
library(AppliedPredictiveModeling)
library(caret)
data(AlzheimerDisease)
adData = data.frame(predictors)
trainIndex = createDataPartition(diagnosis,p=0.5,list=FALSE)
training = adData[trainIndex,]
testing = adData[-trainIndex,]
dim(training)
dim(testing)
adData = data.frame(diagnosis,predictors)
train = createDataPartition(diagnosis, p = 0.50,list=FALSE)
test = createDataPartition(diagnosis, p = 0.50,list=FALSE)
dim(testing)
dim(testing)
adData = data.frame(diagnosis,predictors)
trainIndex = createDataPartition(diagnosis,p=0.5,list=FALSE)
training = adData[trainIndex,]
testing = adData[trainIndex,]
dim(testing)
dim(teraining)
dim(training)
adData = data.frame(diagnosis,predictors)
testIndex = createDataPartition(diagnosis, p = 0.50,list=FALSE)
training = adData[-testIndex,]
testing = adData[testIndex,]
dim(training)
dim(testing)
head(predictors)
adData = data.frame(diagnosis,predictors)
head(predictors)
head(diagnosis)
adData = data.frame(diagnosis,predictors)
head(adData)
library(AppliedPredictiveModeling)
data(concrete)
library(caret)
set.seed(1000)
inTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
training = mixtures[ inTrain,]
testing = mixtures[-inTrain,]
head(training)
hist(training$Superplasticizer)
log(training$Superplasticizer+1)
hist(log(training$Superplasticizer+1))
hist(log(training$Superplasticizer))
training$Superplasticizer
log(training$Superplasticizer+1)
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
head(training)
head(training$IL*)
head(training$[0])
head(training$
head(training)
head(training)
head(training[58:69])
training2<-training[58:69]
head(training)
head(training2)
var(training2)
preproc7<-preProcess(training2,method='pca',pcaComp=7)
preproc9<-preProcess(training2,method='pca',pcaComp=9)
preproc10<-preProcess(training2,method='pca',pcaComp=10)
preproc12<-preProcess(training2,method='pca',pcaComp=12)
var(training2)*0.8
var(training2)*0.8-var(preproc7)
var(preproc7)
preproc7
preproc9
preproc10$std
preproc12<-preProcess(log10(training2+1),method='pca',pcaComp=12)
testing
head(testing)
testing3<-c(testing$diagnosis, testing2)
training3<-c(training$diagnosis, training2)
head(training3)
head(training3$)
head(training3$IL_11)
head(training3[0])
head(training3[1])
install.packages("AppliedPredictiveModeling")
library(AppliedPredictiveModeling)
data(segmentationOriginal)
library(caret)
seed(125)
part<-createDataPartition(y=segmentationOriginal$Case,p=0.75,list=FALSE)
training<-segmentationOriginal[part,]
testing<-segmentationOriginal[-part,]
dim(training);dim(testing)
dim(training)
set.seed(125)
modFit<-train(Case ~ ., method="rpart",data=segmentationOriginal)
install.packages("rpart")
install.packages("pgmm")
install.packages("ElemStatLearn")
library(AppliedPredictiveModeling)
data(segmentationOriginal)
library(caret)
seed(125)
part<-createDataPartition(y=segmentationOriginal$Case,p=0.75,list=FALSE)
training<-segmentationOriginal[part,]
testing<-segmentationOriginal[-part,]
dim(training)
modFit<-train(Case ~ ., method="rpart",data=segmentationOriginal)
install.packages("e1071")
modFit<-train(Case ~ ., method="rpart",data=segmentationOriginal)
head(training)
modFit<-train(Class ~ ., method="rpart",data=segmentationOriginal)
modFit<-train(Class ~ ., method="rpart",data=training)
print(modFit$finalModel)
head(testing)
print(modFit$finalModel)
plot(modFit$finalModel,uniform=TRUE)
text(modFit$finalModel,use.n=TRUE,all=TRUE,cex=.8)
predict(modFit,newdata=testing)
testing
testing$TotalIntenCh2
c(testing$TotalIntenCh2,testing$FiberWidthCh1, testing$PerimCh1)
testing$TotalIntenCh2
head(testing)
training[c(training$TotalIntenCh2,training$FiberWidthCh1)]
training[c(TotalIntenCh2,FiberWidthCh1)]
head(testing)
testing[1,10]
testing$TotalIntenCh2<-23.0
testing$TotalIntenCh2
testing$FiberWidthCh1<-10
testing$PerimStatusCh1<-2
predict(modFit,newdata=testing)
testing$TotalIntenCh2<-50.0
testing$FiberWidthCh1<-10
testing$VarIntenCh4<-100
predict(modFit,newdata=testing)
set.seed(125)
modFit<-train(Class ~ ., method="rpart",data=training)
predict(modFit,newdata=testing)
testing$TotalIntenCh2<-57.0
testing$FiberWidthCh1<-8.0
predict(modFit,newdata=testing)
library(pgmm)
data(olive)
olive = olive[,-1]
head(olive)
olive
?olive
newdata = as.data.frame(t(colMeans(olive)))
library(ElemStatLearn)
data(SAheart)
set.seed(8484)
train = sample(1:dim(SAheart)[1],size=dim(SAheart)[1]/2,replace=F)
trainSA = SAheart[train,]
testSA = SAheart[-train,]
set.seed(13234)
head(trainSA)
modFit<-train(chd ~ age,alcohol,obesity,tobacco,typea,ldl, method="rpart",family="binomial",data=trainSA)
modFit<-train(chd ~ c(age,alcohol,obesity,tobacco,typea,ldl), method="rpart",family="binomial",data=trainSA)
modFit<-train(chd , c(age,alcohol,obesity,tobacco,typea,ldl), method="glm",family="binomial",data=trainSA)
modFit<-train(chd , c(age,alcohol,obesity,tobacco,typea,ldl), method="glm",family="binomial",data=trainSA)
library(ElemStatLearn)
data(vowel.train)
data(vowel.test)
head(vowel)
head(vowel.train)
library(ElemStatLearn)
data(vowel.train)
data(vowel.test)
head(vowel.train)
is.factor(vowel.test$y)
vowel.test$y<-factor(vowel.test$y)
is.factor(vowel.test$y)
vowel.train$y<-factor(vowel.train$y)
set.seed(33833)
modelFitRpartPC<-train(y ~ .,method="rf",data=voxel.train)
library(caret)
library(rpart)
library(randomForest)
modelFitRf<-train(y ~ .,method="rf",data=voxel.train)
modelFitRf<-train(y ~ .,method="rf",data=vowel.train)
modelFitGbm<-train(y ~ .,method="gbm",data=vowel.train)
predModelFitRf<-predict(modelFitRf,newdata=vowel.test)
predModelFitGbm<-predict(modelFitGbm,newdata=vowel.test)
predModelFitRf
confusionMatrix(predModelFitRf,vowel.test$y)
confusionMatrix(predModelFitGbm,vowel.test$y)
predDF<-data.frame(predModelFitRf,predModelFitGbm,vowely=vowel.test$y)
combModFit<-train(vowely~.,method='gam',data=predDF)
combPred<-predict(combModFit,predDF)
combPred
confusionMatrix(combPred,vowely)
confusionMatrix(combPred,predDF$vowely)
library(caret)
library(gbm)
set.seed(3433)
library(AppliedPredictiveModeling)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
set.seed(62433)
modelFitRf<-train(diagnosis ~ .,method="rf",data=training)
modelFitGbm<-train(diagnosis ~ .,method="gbm",data=training)
modelFitGbm<-train(diagnosis ~ .,method="lda",data=training)
predModelFitRf<-predict(modelFitRf,newdata=testing)
predModelFitGbm<-predict(modelFitGbm,newdata=testing)
set.seed(62433)
modelFitRf<-train(diagnosis ~ .,method="rf",data=training)
modelFitGbm<-train(diagnosis ~ .,method="gbm",data=training)
modelFitLda<-train(diagnosis ~ .,method="lda",data=training)
predModelFitRf<-predict(modelFitRf,newdata=testing)
predModelFitGbm<-predict(modelFitGbm,newdata=testing)
predModelFitLda<-predict(modelFitLda,newdata=testing)
confusionMatrix(predModelFitRf,testing$diagnosis)
confusionMatrix(predModelFitGbm,testing$diagnosis)
confusionMatrix(predModelFitLda,testing$diagnosis)
library(AppliedPredictiveModeling)
data(concrete)
inTrain = createDataPartition(concrete$CompressiveStrength, p = 3/4)[[1]]
training = concrete[ inTrain,]
testing = concrete[-inTrain,]
set.seed(233)
modelFitLasso<-train(training$CompressiveStrength ~ .,method="lasso",data=training)
modelFitLasso<-train(training$CompressiveStrength ~ .,method="lasso",data=training)
modelFitLasso
?plot.enet
modelFitLasso$yLimits
modelFitLasso$modelInfo
modelFitLasso$finalModel
enet(x = as.matrix(x), y = y, lambda = 0)
set.seed(3523)
library(AppliedPredictiveModeling)
data(concrete)
inTrain = createDataPartition(concrete$CompressiveStrength, p = 3/4)[[1]]
training = concrete[ inTrain,]
testing = concrete[-inTrain,]
set.seed(325)
f<-svm(CompressiveStrength, data = training)
library(e1071 )
f<-svm(CompressiveStrength, data = training)
f<-svm(training$CompressiveStrength~., data = training)
f
predModel<-predict(f,newdata=testing)
confusionMatrix(predModel,testing$CompressiveStrength)
predModel
testing$CompressiveStrength
RMSE(predModel,testing$CompressiveStrength)
library(raster)
library(rgdal)
library(waveslim)
library(caTools)#envi
fusion=function(x,y,wave){
##En esta funciÃ³n los parÃ¡metros de entrada son: x es la direcciÃ³n de la imÃ¡gen
##pancromÃ¡tica(sin extensiÃ³n de tipo de archivo), y es la direcciÃ³n de la imÃ¡gen en color
##(sin extensiÃ³n de tipo de archivo) y wave es el tipo de Wavelet que queremos utilizar.
NomImp<-paste(x,'.nvi',sep='')
NomHdr<-paste(x,'.hdr',sep='')
Imp=read.ENVI(NomImp,header=NomHdr)
filimp2<-nrow(Imp)/2;
NomImpCol<-paste(y,'.nvi',sep='')
NomHdrCol<-paste(y,'.hdr',sep='')
NomOut<-paste(y,wave,sep='')
Col=read.ENVI(NomImpCol,header=NomHdrCol)
filCol<-nrow(Col);
if(filCol>=filimp2){ ##Para imÃ¡genes de 2*2
Out<-dwt.2d(Imp, wf=wave, J=1, boundary="periodic");
fil<-nrow(Out$LH1);
col<-ncol(Out$LH1);
Out$LH1=2*Col[1:fil,1:col]*Out$LH1[1:fil,1:col]/Out$LL1[1:fil,1:col];
Out$HL1=2*Col[1:fil,1:col]*Out$HL1[1:fil,1:col]/Out$LL1[1:fil,1:col];
Out$HH1=2*Col[1:fil,1:col]*Out$HH1[1:fil,1:col]/Out$LL1[1:fil,1:col];
Out$LL1=2*Col[1:fil,1:col];
Out$LL1[is.nan(Out$LL1)]=0;
Out$HL1[is.nan(Out$HL1)]=0;
Out$LH1[is.nan(Out$LH1)]=0;
Out$HH1[is.nan(Out$HH1)]=0;
InvOut<-idwt.2d(Out);
write.ENVI (InvOut, paste(NomOut,'.nvi',sep=''))
}
if(filCol<filimp2){##Para imÃ¡genes de 4*4
Out<-dwt.2d(Imp,wf=wave,J=2,boundary="periodic");
fil2<-nrow(Out$LH2);
col2<-ncol(Out$LH2);
Out$LH2=4*Col[1:fil2,1:col2]*Out$LH2[1:fil2,1:col2]/Out$LL2[1:fil2,1:col2];
Out$HL2=4*Col[1:fil2,1:col2]*Out$HL2[1:fil2,1:col2]/Out$LL2[1:fil2,1:col2];
Out$HH2=4*Col[1:fil2,1:col2]*Out$HH2[1:fil2,1:col2]/Out$LL2[1:fil2,1:col2];
for (i in 1:fil2){
for (j in 1:col2){
Out$LH1[2*i-1,2*j-1]=4*Col[i,j]*Out$LH1[2*i-1,2*j-1]/Out$LL2[i,j];
Out$LH1[2*i,2*j-1]=4*Col[i,j]*Out$LH1[2*i,2*j-1]/Out$LL2[i,j];
Out$LH1[2*i-1,2*j]=4*Col[i,j]*Out$LH1[2*i-1,2*j]/Out$LL2[i,j];
Out$LH1[2*i,2*j]=4*Col[i,j]*Out$LH1[2*i,2*j]/Out$LL2[i,j];
Out$HL1[2*i-1,2*j-1]=4*Col[i,j]*Out$HL1[2*i-1,2*j-1]/Out$LL2[i,j];
Out$HL1[2*i,2*j-1]=4*Col[i,j]*Out$HL1[2*i,2*j-1]/Out$LL2[i,j];
Out$HL1[2*i-1,2*j]=4*Col[i,j]*Out$HL1[2*i-1,2*j]/Out$LL2[i,j];
Out$HL1[2*i,2*j]=4*Col[i,j]*Out$HL1[2*i,2*j]/Out$LL2[i,j];
Out$HH1[2*i-1,2*j-1]=4*Col[i,j]*Out$HH1[2*i-1,2*j-1]/Out$LL2[i,j];
Out$HH1[2*i,2*j-1]=4*Col[i,j]*Out$HH1[2*i,2*j-1]/Out$LL2[i,j];
Out$HH1[2*i-1,2*j]=4*Col[i,j]*Out$HH1[2*i-1,2*j]/Out$LL2[i,j];
Out$HH1[2*i,2*j]=4*Col[i,j]*Out$HH1[2*i,2*j]/Out$LL2[i,j];
}
}
Out$LL2=4*Col[1:fil2,1:col2];
Out$HL1[is.nan(Out$HL1)]=0;
Out$LH1[is.nan(Out$LH1)]=0;
Out$HH1[is.nan(Out$HH1)]=0;
Out$LL2[is.nan(Out$LL2)]=0;
Out$HL2[is.nan(Out$HL2)]=0;
Out$LH2[is.nan(Out$LH2)]=0;
Out$HH2[is.nan(Out$HH2)]=0;
InvOut<-idwt.2d(Out);
write.ENVI (InvOut, paste(NomOut,'.nvi',sep=''))
}
}
fusion('e:/trabajos/Fusion/santiago/multi1','e:/trabajos/Fusion/santiago/pan','haar')
fusion('e:/trabajos/Fusion/santiago/pan','e:/trabajos/Fusion/santiago/multi1','haar')
fusion('e:/trabajos/Fusion/santiago/pan','e:/trabajos/Fusion/santiago/multi1','haar')
fusion('e:/trabajos/Fusion/santiago/pan','e:/trabajos/Fusion/santiago/multi1','haar')
fusion('e:/trabajos/Fusion/santiago/pan','e:/trabajos/Fusion/santiago/multi1','haar')
fusion('e:/trabajos/Fusion/santiago/multi1_1-25','e:/trabajos/Fusion/santiago/pan_1-100','haar')
fusion('e:/trabajos/Fusion/santiago/pan_1-100','e:/trabajos/Fusion/santiago/multi1_1-25','haar')
fusion('e:/trabajos/Fusion/santiago/pan_2-101','e:/trabajos/Fusion/santiago/multi1_1-25','haar')
fusion('e:/trabajos/Fusion/santiago/pan_3-102','e:/trabajos/Fusion/santiago/multi1_1-25','haar')
fusion('e:/trabajos/Fusion/santiago/pan','e:/trabajos/Fusion/santiago/multi1','haar')
library(raster)
library(rgdal)
library(waveslim)
library(caTools)#envi
fusion=function(x,y,wave){
##En esta funciÃ³n los parÃ¡metros de entrada son: x es la direcciÃ³n de la imÃ¡gen
##pancromÃ¡tica(sin extensiÃ³n de tipo de archivo), y es la direcciÃ³n de la imÃ¡gen en color
##(sin extensiÃ³n de tipo de archivo) y wave es el tipo de Wavelet que queremos utilizar.
NomImp<-paste(x,'.nvi',sep='')
NomHdr<-paste(x,'.hdr',sep='')
Imp=read.ENVI(NomImp,header=NomHdr)
filimp2<-nrow(Imp)/2;
NomImpCol<-paste(y,'.nvi',sep='')
NomHdrCol<-paste(y,'.hdr',sep='')
NomOut<-paste(y,wave,sep='')
Col=read.ENVI(NomImpCol,header=NomHdrCol)
filCol<-nrow(Col);
if(filCol>=filimp2){ ##Para imÃ¡genes de 2*2
Out<-dwt.2d(Imp, wf=wave, J=1, boundary="periodic");
fil<-nrow(Out$LH1);
col<-ncol(Out$LH1);
Out$LH1=2*Col[1:fil,1:col]*Out$LH1[1:fil,1:col]/Out$LL1[1:fil,1:col];
Out$HL1=2*Col[1:fil,1:col]*Out$HL1[1:fil,1:col]/Out$LL1[1:fil,1:col];
Out$HH1=2*Col[1:fil,1:col]*Out$HH1[1:fil,1:col]/Out$LL1[1:fil,1:col];
Out$LL1=2*Col[1:fil,1:col];
Out$LL1[is.nan(Out$LL1)]=0;
Out$HL1[is.nan(Out$HL1)]=0;
Out$LH1[is.nan(Out$LH1)]=0;
Out$HH1[is.nan(Out$HH1)]=0;
InvOut<-idwt.2d(Out);
write.ENVI (InvOut, paste(NomOut,'.nvi',sep=''))
}
if(filCol<filimp2){##Para imÃ¡genes de 4*4
Out<-dwt.2d(Imp,wf=wave,J=2,boundary="periodic");
fil2<-nrow(Out$LH2);
col2<-ncol(Out$LH2);
Out$LH2=4*Col[1:fil2,1:col2]*Out$LH2[1:fil2,1:col2]/Out$LL2[1:fil2,1:col2];
Out$HL2=4*Col[1:fil2,1:col2]*Out$HL2[1:fil2,1:col2]/Out$LL2[1:fil2,1:col2];
Out$HH2=4*Col[1:fil2,1:col2]*Out$HH2[1:fil2,1:col2]/Out$LL2[1:fil2,1:col2];
for (i in 1:fil2){
for (j in 1:col2){
Out$LH1[2*i-1,2*j-1]=4*Col[i,j]*Out$LH1[2*i-1,2*j-1]/Out$LL2[i,j];
Out$LH1[2*i,2*j-1]=4*Col[i,j]*Out$LH1[2*i,2*j-1]/Out$LL2[i,j];
Out$LH1[2*i-1,2*j]=4*Col[i,j]*Out$LH1[2*i-1,2*j]/Out$LL2[i,j];
Out$LH1[2*i,2*j]=4*Col[i,j]*Out$LH1[2*i,2*j]/Out$LL2[i,j];
Out$HL1[2*i-1,2*j-1]=4*Col[i,j]*Out$HL1[2*i-1,2*j-1]/Out$LL2[i,j];
Out$HL1[2*i,2*j-1]=4*Col[i,j]*Out$HL1[2*i,2*j-1]/Out$LL2[i,j];
Out$HL1[2*i-1,2*j]=4*Col[i,j]*Out$HL1[2*i-1,2*j]/Out$LL2[i,j];
Out$HL1[2*i,2*j]=4*Col[i,j]*Out$HL1[2*i,2*j]/Out$LL2[i,j];
Out$HH1[2*i-1,2*j-1]=4*Col[i,j]*Out$HH1[2*i-1,2*j-1]/Out$LL2[i,j];
Out$HH1[2*i,2*j-1]=4*Col[i,j]*Out$HH1[2*i,2*j-1]/Out$LL2[i,j];
Out$HH1[2*i-1,2*j]=4*Col[i,j]*Out$HH1[2*i-1,2*j]/Out$LL2[i,j];
Out$HH1[2*i,2*j]=4*Col[i,j]*Out$HH1[2*i,2*j]/Out$LL2[i,j];
}
}
Out$LL2=4*Col[1:fil2,1:col2];
Out$HL1[is.nan(Out$HL1)]=0;
Out$LH1[is.nan(Out$LH1)]=0;
Out$HH1[is.nan(Out$HH1)]=0;
Out$LL2[is.nan(Out$LL2)]=0;
Out$HL2[is.nan(Out$HL2)]=0;
Out$LH2[is.nan(Out$LH2)]=0;
Out$HH2[is.nan(Out$HH2)]=0;
InvOut<-idwt.2d(Out);
write.ENVI (InvOut, paste(NomOut,'.nvi',sep=''))
}
}
fusion('e:/trabajos/Fusion/santiago/pan','e:/trabajos/Fusion/santiago/multi1','d4')
fusion('e:/trabajos/Fusion/santiago/pan','e:/trabajos/Fusion/santiago/multi2','d4')
fusion('e:/trabajos/Fusion/santiago/pan','e:/trabajos/Fusion/santiago/multi3','d4')
fusion('e:/trabajos/Fusion/santiago/pan','e:/trabajos/Fusion/santiago/multi4','d4')
fusion('e:/trabajos/Fusion/santiago/pan','e:/trabajos/Fusion/santiago/multi3','haar')
fusion('e:/trabajos/Fusion/santiago/pan','e:/trabajos/Fusion/santiago/multi4','haar')
fusion('e:/trabajos/Fusion/santiago/pan','e:/trabajos/Fusion/santiago/multi1','d16')
fusion('e:/trabajos/Fusion/santiago/pan','e:/trabajos/Fusion/santiago/multi2','d16')
fusion('e:/trabajos/Fusion/santiago/pan','e:/trabajos/Fusion/santiago/multi3','d16')
fusion('e:/trabajos/Fusion/santiago/pan','e:/trabajos/Fusion/santiago/multi4','d16')
memory.limit(size=100000)
library(tiff)
library(raster)
read_file<-readTIFF('E:/trabajos/Dron/imagenesSmartRural/2015-06-04-07-16-34/MSP_00074_00003.tif')
memory.limit(size=100000)
library(raster)
library(rgdal)
library(waveslim)
library(caTools)#envi
fusion=function(x,y,wave){
##En esta funciÃ³n los parÃ¡metros de entrada son: x es la direcciÃ³n de la imÃ¡gen
##pancromÃ¡tica(sin extensiÃ³n de tipo de archivo), y es la direcciÃ³n de la imÃ¡gen en color
##(sin extensiÃ³n de tipo de archivo) y wave es el tipo de Wavelet que queremos utilizar.
NomImp<-paste(x,'.nvi',sep='')
NomHdr<-paste(x,'.hdr',sep='')
Imp=read.ENVI(NomImp,header=NomHdr)
filimp2<-nrow(Imp)/2;
NomImpCol<-paste(y,'.nvi',sep='')
NomHdrCol<-paste(y,'.hdr',sep='')
NomOut<-paste(y,wave,sep='')
Col=read.ENVI(NomImpCol,header=NomHdrCol)
filCol<-nrow(Col);
if(filCol>=filimp2){ ##Para imÃ¡genes de 2*2
Out<-dwt.2d(Imp, wf=wave, J=1, boundary="periodic");
fil<-nrow(Out$LH1);
col<-ncol(Out$LH1);
Out$LH1=2*Col[1:fil,1:col]*Out$LH1[1:fil,1:col]/Out$LL1[1:fil,1:col];
Out$HL1=2*Col[1:fil,1:col]*Out$HL1[1:fil,1:col]/Out$LL1[1:fil,1:col];
Out$HH1=2*Col[1:fil,1:col]*Out$HH1[1:fil,1:col]/Out$LL1[1:fil,1:col];
Out$LL1=2*Col[1:fil,1:col];
Out$LL1[is.nan(Out$LL1)]=0;
Out$HL1[is.nan(Out$HL1)]=0;
Out$LH1[is.nan(Out$LH1)]=0;
Out$HH1[is.nan(Out$HH1)]=0;
InvOut<-idwt.2d(Out);
write.ENVI (InvOut, paste(NomOut,'.nvi',sep=''))
}
if(filCol<filimp2){##Para imÃ¡genes de 4*4
Out<-dwt.2d(Imp,wf=wave,J=2,boundary="periodic");
fil2<-nrow(Out$LH2);
col2<-ncol(Out$LH2);
Out$LH2=4*Col[1:fil2,1:col2]*Out$LH2[1:fil2,1:col2]/Out$LL2[1:fil2,1:col2];
Out$HL2=4*Col[1:fil2,1:col2]*Out$HL2[1:fil2,1:col2]/Out$LL2[1:fil2,1:col2];
Out$HH2=4*Col[1:fil2,1:col2]*Out$HH2[1:fil2,1:col2]/Out$LL2[1:fil2,1:col2];
for (i in 1:fil2){
for (j in 1:col2){
Out$LH1[2*i-1,2*j-1]=4*Col[i,j]*Out$LH1[2*i-1,2*j-1]/Out$LL2[i,j];
Out$LH1[2*i,2*j-1]=4*Col[i,j]*Out$LH1[2*i,2*j-1]/Out$LL2[i,j];
Out$LH1[2*i-1,2*j]=4*Col[i,j]*Out$LH1[2*i-1,2*j]/Out$LL2[i,j];
Out$LH1[2*i,2*j]=4*Col[i,j]*Out$LH1[2*i,2*j]/Out$LL2[i,j];
Out$HL1[2*i-1,2*j-1]=4*Col[i,j]*Out$HL1[2*i-1,2*j-1]/Out$LL2[i,j];
Out$HL1[2*i,2*j-1]=4*Col[i,j]*Out$HL1[2*i,2*j-1]/Out$LL2[i,j];
Out$HL1[2*i-1,2*j]=4*Col[i,j]*Out$HL1[2*i-1,2*j]/Out$LL2[i,j];
Out$HL1[2*i,2*j]=4*Col[i,j]*Out$HL1[2*i,2*j]/Out$LL2[i,j];
Out$HH1[2*i-1,2*j-1]=4*Col[i,j]*Out$HH1[2*i-1,2*j-1]/Out$LL2[i,j];
Out$HH1[2*i,2*j-1]=4*Col[i,j]*Out$HH1[2*i,2*j-1]/Out$LL2[i,j];
Out$HH1[2*i-1,2*j]=4*Col[i,j]*Out$HH1[2*i-1,2*j]/Out$LL2[i,j];
Out$HH1[2*i,2*j]=4*Col[i,j]*Out$HH1[2*i,2*j]/Out$LL2[i,j];
}
}
Out$LL2=4*Col[1:fil2,1:col2];
Out$HL1[is.nan(Out$HL1)]=0;
Out$LH1[is.nan(Out$LH1)]=0;
Out$HH1[is.nan(Out$HH1)]=0;
Out$LL2[is.nan(Out$LL2)]=0;
Out$HL2[is.nan(Out$HL2)]=0;
Out$LH2[is.nan(Out$LH2)]=0;
Out$HH2[is.nan(Out$HH2)]=0;
InvOut<-idwt.2d(Out);
write.ENVI (InvOut, paste(NomOut,'.nvi',sep=''))
}
}
fusion('e:/trabajos/Fusion/santiago/pan','e:/trabajos/Fusion/santiago/multi3','haar')
fusion('e:/trabajos/Fusion/santiago/pan','e:/trabajos/Fusion/santiago/multi4','haar')
fusion('e:/trabajos/Fusion/santiago/pan','e:/trabajos/Fusion/santiago/multi1','d4')
fusion('e:/trabajos/Fusion/santiago/pan','e:/trabajos/Fusion/santiago/multi2','d4')
fusion('e:/trabajos/Fusion/santiago/pan','e:/trabajos/Fusion/santiago/multi3','d4')
fusion('e:/trabajos/Fusion/santiago/pan','e:/trabajos/Fusion/santiago/multi4','d4')
fusion('e:/trabajos/Fusion/santiago/pan','e:/trabajos/Fusion/santiago/multi1','d16')
fusion('e:/trabajos/Fusion/santiago/pan','e:/trabajos/Fusion/santiago/multi2','d16')
fusion('e:/trabajos/Fusion/santiago/pan','e:/trabajos/Fusion/santiago/multi3','d16')
fusion('e:/trabajos/Fusion/santiago/pan','e:/trabajos/Fusion/santiago/multi4','d16')
library("dplyr")
activity <- read.csv("activity.csv")
setwd("C:/Users/Pablo/RepData_PeerAssessment1/")
activity <- read.csv("activity.csv")
activity$date <- as.Date(activity$date)
head(activity)
summary(activity)
